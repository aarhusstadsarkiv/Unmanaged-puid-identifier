import argparse
import sqlite3
import httpx

from sqlite3.dbapi2 import Connection
from typing import Dict, Any


def missingpuididentifier(file: str) -> None:
    """
    * Takes a path to a database generated by Digiarch

    * Prints a list of every puid in the given database that isn't
      currently found within our convertool .json files
    """
    # read in our .json files as dicts.
    # have to pull them from our convertool github to make sure they're up to date
    response_convert = httpx.get(
        "https://raw.githubusercontent.com/aarhusstadsarkiv/"
        "convertool/master/data/to_convert2.json"
    )
    response_ignore = httpx.get(
        "https://raw.githubusercontent.com/aarhusstadsarkiv/"
        "convertool/master/data/to_ignore.json"
    )

    convert_dict: Dict[str, Any] = response_convert.json()
    ignore_dict: Dict[str, Any] = response_ignore.json()

    # make a query to our database to get all the puids from the signaturecount view
    # then iterate thru the result, printing every puid currently missing from the .jsons
    try:
        con: Connection = sqlite3.connect(
            "file:" + file + "?mode=ro", uri=True
        )
        for puid, signature in con.execute(
            "SELECT puid, signature FROM _SignatureCount"
        ):
            if puid not in convert_dict and puid not in ignore_dict:
                print(f"{puid} {signature}")

    except sqlite3.DatabaseError:
        print(
            "Error: "
            + file
            + " isn't a path to a valid Digiarch-produced database!"
        )


# Set up argparse stuff

parser = argparse.ArgumentParser()
parser.add_argument(
    "file",
    help="the path to the database generated by Digiarch that's "
    + "to be compared with our current convertool json files",
    type=str,
)
args: argparse.Namespace = parser.parse_args()
missingpuididentifier(args.file)
